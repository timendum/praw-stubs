import praw
from . import Subreddit as Subreddit
from ..const import API_PATH as API_PATH
from .base import PRAWBase as PRAWBase
from .listing.generator import ListingGenerator as ListingGenerator
from .util import stream_generator as stream_generator
from typing import Dict, Iterator, List, Optional, Union

class Subreddits(PRAWBase):
    def default(self, **generator_kwargs: Union[str, int, Dict[str, str]]) -> Iterator['praw.models.Subreddit']: ...
    def gold(self, **generator_kwargs) -> Iterator['praw.models.Subreddit']: ...
    def premium(self, **generator_kwargs: Union[str, int, Dict[str, str]]) -> Iterator['praw.models.Subreddit']: ...
    def new(self, **generator_kwargs: Union[str, int, Dict[str, str]]) -> Iterator['praw.models.Subreddit']: ...
    def popular(self, **generator_kwargs: Union[str, int, Dict[str, str]]) -> Iterator['praw.models.Subreddit']: ...
    def recommended(self, subreddits: List[Union[str, 'praw.models.Subreddit']], omit_subreddits: Optional[List[Union[str, 'praw.models.Subreddit']]] = ...) -> List['praw.models.Subreddit']: ...
    def search(self, query: str, **generator_kwargs: Union[str, int, Dict[str, str]]) -> Iterator['praw.models.Subreddit']: ...
    def search_by_name(self, query: str, *, include_nsfw: bool = ..., exact: bool = ...) -> List['praw.models.Subreddit']: ...
    def search_by_topic(self, query: str) -> List['praw.models.Subreddit']: ...
    def stream(self, **stream_options: Union[str, int, Dict[str, str]]) -> Iterator['praw.models.Subreddit']: ...
