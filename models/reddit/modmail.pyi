import praw
from ...const import API_PATH as API_PATH
from ...util import snake_case_keys as snake_case_keys
from .base import RedditBase as RedditBase
from _typeshed import Incomplete
from typing import Any, Dict, List, Optional

class ModmailConversation(RedditBase):
    STR_FIELD: str
    @classmethod
    def parse(cls, data: Dict[str, Any], reddit: praw.Reddit, convert_objects: bool = ...): ...
    id: Incomplete
    def __init__(self, reddit: praw.Reddit, id: Optional[str] = ..., mark_read: bool = ..., _data: Optional[Dict[str, Any]] = ...) -> None: ...
    def archive(self) -> None: ...
    def highlight(self) -> None: ...
    def mute(self, *, num_days: int = ...) -> None: ...
    def read(self, *, other_conversations: Optional[List['ModmailConversation']] = ...): ...
    def reply(self, *, author_hidden: bool = ..., body: str, internal: bool = ...) -> ModmailMessage: ...
    def unarchive(self) -> None: ...
    def unhighlight(self) -> None: ...
    def unmute(self) -> None: ...
    def unread(self, *, other_conversations: Optional[List['ModmailConversation']] = ...): ...

class ModmailObject(RedditBase):
    AUTHOR_ATTRIBUTE: str
    STR_FIELD: str
    def __setattr__(self, attribute: str, value: Any): ...

class ModmailAction(ModmailObject): ...
class ModmailMessage(ModmailObject): ...
