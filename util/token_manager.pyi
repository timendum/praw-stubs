import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod

class BaseTokenManager(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @property
    def reddit(self): ...
    @reddit.setter
    def reddit(self, value) -> None: ...
    @abstractmethod
    def post_refresh_callback(self, authorizer): ...
    @abstractmethod
    def pre_refresh_callback(self, authorizer): ...

class FileTokenManager(BaseTokenManager):
    def __init__(self, filename) -> None: ...
    def post_refresh_callback(self, authorizer) -> None: ...
    def pre_refresh_callback(self, authorizer) -> None: ...

class SQLiteTokenManager(BaseTokenManager):
    key: Incomplete
    def __init__(self, *, database, key) -> None: ...
    def is_registered(self): ...
    def post_refresh_callback(self, authorizer) -> None: ...
    def pre_refresh_callback(self, authorizer) -> None: ...
    def register(self, refresh_token): ...
